name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '19'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test -- --watchAll=false

      - name: Build application
        run: npm run build

      - name: Compress build directory
        run: zip -r build.zip build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build.zip

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build.zip
          asset_name: build.zip
          asset_content_type: application/zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '19'

      - name: Install dependencies
        run: npm install

      - name: Deploy to Vercel
        id: vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          prod: true

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Send email notification
        uses: actions/github-script@v6
        with:
          script: |
            const sgMail = require('@sendgrid/mail');
            sgMail.setApiKey('${{ secrets.SENDGRID_API_KEY }}');
            const msg = {
              to: 'developer@example.com',
              from: 'ci-cd@example.com',
              subject: 'CI/CD Pipeline Failed',
              text: 'The CI/CD pipeline failed at some step. Please check the logs for more details.',
            };
            sgMail.send(msg).then(() => {
              console.log('Email sent');
            }).catch((error) => {
              console.error(error);
            });